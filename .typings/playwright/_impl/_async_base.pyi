import asyncio
from types import TracebackType
from typing import Any, Generic, Type, TypeVar

from playwright._impl._impl_to_api_mapping import ImplWrapper

T = TypeVar('T')
Self = TypeVar('Self', bound='AsyncContextManager')

class AsyncEventInfo(Generic[T]):
    def __init__(self, future: asyncio.Future[T]) -> None: ...
    @property
    async def value(self) -> T: ...
    def is_done(self) -> bool: ...

class AsyncEventContextManager(Generic[T]):
    def __init__(self, future: asyncio.Future[T]) -> None: ...
    async def __aenter__(self) -> AsyncEventInfo[T]: ...
    async def __aexit__(self, exc_type: Type[BaseException], exc_val: BaseException, exc_tb: TracebackType) -> None: ...

class AsyncBase(ImplWrapper):
    def __init__(self, impl_obj: Any) -> None: ...
    def on(self, event: Any, f: Any) -> None: ...
    def once(self, event: Any, f: Any) -> None: ...
    def remove_listener(self, event: Any, f: Any) -> None: ...

class AsyncContextManager(AsyncBase):
    async def __aenter__(self: Self) -> Self: ...
    async def __aexit__(self, exc_type: Type[BaseException], exc_val: BaseException, traceback: TracebackType) -> None: ...
    async def close(self) -> None: ...
